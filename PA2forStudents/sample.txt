// 파싱된 HTTP 요청 정보를 저장하기 위한 구조체
typedef struct {
    char host[1024];
    int port;
    char path[4096];
} ParsedRequest;

// HTTP 요청을 파싱하는 함수
// 성공 시 0, 실패(잘못된 요청) 시 -1 반환
int parse_request(char *buffer, size_t buffer_len, ParsedRequest *req) {
    char method[16], url[4096], version[16];

    // 1. 요청 라인 파싱 (e.g., "GET http://example.com/ HTTP/1.0")
    int sscanf_res = sscanf(buffer, "%s %s %s", method, url, version);
    if (sscanf_res != 3) {
        fprintf(stderr, "Malformed request line\n");
        return -1;
    }

    // 2. 메소드와 버전 검증 (GET, HTTP/1.0 만 허용)
    if (strcmp(method, "GET") != 0) {
        fprintf(stderr, "Invalid method: %s\n", method);
        return -1;
    }
    if (strstr(version, "HTTP/1.0") == NULL) {
        fprintf(stderr, "Invalid HTTP version: %s\n", version);
        return -1;
    }

    // 3. Host 헤더 존재 여부 검증
    if (strstr(buffer, "Host:") == NULL) {
        fprintf(stderr, "Host header is missing\n");
        return -1;
    }

    // 4. URL 파싱하여 host, port, path 추출
    char *host_ptr = strstr(url, "http://");
    if (host_ptr != NULL) {
        host_ptr += strlen("http://"); // "http://" 다음부터가 실제 호스트 주소
    } else {
        // http:// 가 없는 경우를 대비 (문제에서는 항상 있다고 가정)
        host_ptr = url;
    }

    char *port_ptr = strchr(host_ptr, ':');
    char *path_ptr = strchr(host_ptr, '/');

    if (path_ptr == NULL) {
        // 경로가 없는 경우 (e.g., http://example.com)
        // 루트 경로로 설정
        strcpy(req->path, "/");
    } else {
        strncpy(req->path, path_ptr, sizeof(req->path) - 1);
        req->path[sizeof(req->path) - 1] = '\0';
    }

    if (port_ptr != NULL && (path_ptr == NULL || port_ptr < path_ptr)) {
        // 포트가 명시된 경우 (e.g., http://example.com:8080/)
        req->port = atoi(port_ptr + 1);
        // 호스트 이름에서 포트 부분 제외
        strncpy(req->host, host_ptr, port_ptr - host_ptr);
        req->host[port_ptr - host_ptr] = '\0';
    } else {
        // 포트가 명시되지 않은 경우
        req->port = 80; // 기본 포트 80
        if (path_ptr != NULL) {
            strncpy(req->host, host_ptr, path_ptr - host_ptr);
            req->host[path_ptr - host_ptr] = '\0';
        } else {
            // 경로도 없는 경우 (e.g., http://example.com)
            strcpy(req->host, host_ptr);
        }
    }
    
    // gethostbyname으로 호스트 유효성 검증 (PDF Hint)
    if (gethostbyname(req->host) == NULL) {
        fprintf(stderr, "Invalid host: %s\n", req->host);
        return -1;
    }

    return 0; // 파싱 성공
}


// main 함수 적용 예시
        if (!fork()) { // this is the child process
            close(sockfd); // child doesn't need the listener
			char* buffer = (char*) malloc(MAXDATASIZE);
			size_t total_read = 0;
			size_t byte_read;

            // 요청 전체를 읽어옴
			while( (byte_read = recv(new_fd, buffer + total_read, MAXDATASIZE - total_read, 0) ) > 0 ){
				total_read += byte_read;
                // 요청의 끝을 나타내는 "\r\n\r\n"을 찾으면 읽기 중단
				if (strstr(buffer, "\r\n\r\n") != NULL) {
					break;
			    }
			}
            buffer[total_read] = '\0'; // null-terminate the string

            if (byte_read <= 0) {
                perror("recv");
                free(buffer);
                close(new_fd);
                exit(1);
            }

            printf("---------- Received Request ----------\n%s\n", buffer);

            // 요청 파싱
            ParsedRequest req;
            memset(&req, 0, sizeof(ParsedRequest)); // 구조체 초기화

            if (parse_request(buffer, total_read, &req) == 0) {
                // 파싱 성공
                printf("---------- Parsing Success ----------\n");
                printf("Host: %s\n", req.host);
                printf("Port: %d\n", req.port);
                printf("Path: %s\n", req.path);
                printf("-------------------------------------\n");

                // TODO: 여기서 파싱된 정보를 바탕으로 원격 서버에 접속하고 데이터를 요청해야 합니다.

            } else {
                // 파싱 실패: 400 Bad Request 응답 전송
                printf("---------- Parsing Failed: Sending 400 Bad Request ----------\n");
                char *error_msg = "HTTP/1.0 400 Bad Request\r\n";
                if (send(new_fd, error_msg, strlen(error_msg), 0) == -1) {
                    perror("send error");
                }
            }

			free(buffer);
            close(new_fd);
            exit(0);
        }
